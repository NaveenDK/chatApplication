1) How would you get this project started?
Design the front end divs in one index.html file as this is a very simple app
 and then get command line on the project folder
--and run npm init to create project files -(we can also do it manually)
2) what dependencies will you add at the start for the package.json generated above
socket.io and express-(do npm install to install exress and socket .io)

3) where would you create the entry point AND how will you get it to serve what you
want(which is the index.html)
Create server. js (as the entrypoint ) and include express and initialize stuff you want as 
below



var express= require('express'),
  app= express();
  server=require('http').createServer(app),
  io=require('socket.io').listen(server);

server.listen(process.env.PORT||3000);
console.log('server running..');
//following get function will serve the file we want which is index.html
app.get('/',function(req,res){
    res.sendFile(__dirname+'/index.html');
});

4) After wards?
So after we know that we can render the html file there - we include jquery and socket.io js files
under scripts of the file
add a jquery function that takes in the messages and emit them when messages are submmitted--for this
we need to define a function with sockets.on( send message) so that it identifies the connected
socket from the server(server.js) back to the client (which in this case-index.html)
so the server will have a function like this 


```
io.sockets.on('connection',function(socket){
    console.log('Socket connected..');
    //Send Message
    socket.on('send message',function(data){
        io.sockets.emit('new message',{msg:data});
        
    });
```

And the index.html file (will have some jquery as follows)

```
  $(function(){
        var socket= io.connect();
        var $messageForm= $('#messageForm');
        var $message=$('#message');
        var $chat=$('#chatWindow');

        $messageForm.submit(function(e){
            e.preventDefault();//to prevent default ways of form submission
            socket.emit('send message',$message.val());
            $message.val('');
        });//close of the submit function

 //send the message to the server and the server gets it and send new data back
            socket.on('new message',function(data){
                $chat.append(data.msg+'<br>');

            });//close of the socketon function
```

After above functions are set the application should have basic chat functionality


5) How would you implement User functionality?

